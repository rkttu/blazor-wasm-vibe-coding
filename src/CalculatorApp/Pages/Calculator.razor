@page "/calculator"
@using CalculatorApp.Services
@inject CalculatorService CalculatorService

<PageTitle>계산기</PageTitle>

<h1>사칙연산 계산기</h1>

<div class="calculator-container">
    <div class="form-group">
        <label for="firstNumber">첫 번째 숫자:</label>
        <input id="firstNumber" type="number" class="form-control" @bind="firstNumber" />
    </div>
    
    <div class="form-group">
        <label for="secondNumber">두 번째 숫자:</label>
        <input id="secondNumber" type="number" class="form-control" @bind="secondNumber" />
    </div>
    
    <div class="operations-container">
        <h4>연산 선택:</h4>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-primary" @onclick="() => Calculate(Operation.Add)">더하기 (+)</button>
            <button type="button" class="btn btn-primary" @onclick="() => Calculate(Operation.Subtract)">빼기 (-)</button>
            <button type="button" class="btn btn-primary" @onclick="() => Calculate(Operation.Multiply)">곱하기 (×)</button>
            <button type="button" class="btn btn-primary" @onclick="() => Calculate(Operation.Divide)">나누기 (÷)</button>
        </div>
    </div>
    
    <div class="result-container">
        <h3>결과: @result</h3>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private double firstNumber = 0;
    private double secondNumber = 0;
    private double result = 0;
    private string errorMessage = string.Empty;

    private void Calculate(Operation operation)
    {
        result = CalculatorService.Calculate(firstNumber, secondNumber, operation);
        errorMessage = CalculatorService.ErrorMessage;
    }
}